@using FabricCutter.UI.Logic
@using FabricCutter.UI.Service
@inject ApplicationSettings _settings

<div class="marker-delimitator marker-start" style=@startDelimitatorStyle>
</div>
@if (Marker.StartPosition >= 0 && Marker.EndPosition >= 0)
{
	<div class="marker-content" style=@contentStyle>
	</div>	
}
@if (Marker.EndPosition > 0)
{
	<div class="marker-delimitator marker-end" style=@endDelimitatorStyle>
	</div>
}
<div class="marker-descriptor" style=@descriptorStyle>
	@String.Format("M{0}", Marker.Id)
</div>

 @if (Marker.SubMarker is not null)
{
	<SubMarkersComponent SubMarker=@Marker.SubMarker ></SubMarkersComponent>	
}



@code {

	[Parameter]
	public Marker Marker { get; set; }


	public string contentStyle { get; set; }
	public string startDelimitatorStyle { get; set; }
	public string endDelimitatorStyle { get; set; }
	public string descriptorStyle { get; set; }


	protected override Task OnParametersSetAsync()
	{
		//start="z-index:106; right:700px; " end="z-index:106; right:500px; " idx="z-index:107; right:500px; width:200px;"
		
		startDelimitatorStyle = $"z-index:{100 + Marker.Id}; left: calc(({Marker.StartPosition } / {_settings.SliderLenght }) * 100%); ";
		contentStyle = $"z-index:{101 + Marker.Id}; left: calc(({Marker.StartPosition} / {_settings.SliderLenght}) * 100%); width: calc(({Marker.MarkerLenght} / {_settings.SliderLenght}) * 100%); ";
		endDelimitatorStyle = $"z-index:{100 + Marker.Id}; left: calc(({Marker.EndPosition} / {_settings.SliderLenght}) * 100%); ";
		descriptorStyle = $"z-index:{100 + Marker.Id}; left: calc(({Marker.StartPosition} / {_settings.SliderLenght}) * 100%); ";


		StateHasChanged();
		return base.OnParametersSetAsync();
	}


}
