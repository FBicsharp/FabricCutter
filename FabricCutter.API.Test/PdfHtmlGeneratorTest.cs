using FabricCutter.API.Logic.Pdf;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using NSubstitute;
using System.Text;

namespace FabricCutter.API.Test
{
	public class PdfHtmlGeneratorTest
	{
		private IPdfHtmlGenerator _pdfHtmlGenerator;

		public PdfHtmlGeneratorTest()
		{
			var loggerMock = Substitute.For<ILogger<PdfHtmlGenerator>>();
			var httpContextAccessorMock = Substitute.For<IHttpContextAccessor>();
			_pdfHtmlGenerator = new PdfHtmlGenerator(loggerMock);
		}

		[Fact]
		public void should_return_html_content_for_PDF()
		{
			// Arrange
			//is allready done in constructor
			//Act			
			CharMap[,] matrinxChar = new CharMap[,]
			{
				{ new CharMap(' ', true, RoundedType.None, 0) ,  new CharMap(' ', true, RoundedType.None, 0),  new CharMap(' ', true, RoundedType.None, 0),			new CharMap('S', true, RoundedType.Starting, 0),	new CharMap('T', true, RoundedType.Central, 0),		new CharMap('A', true, RoundedType.Central, 0),		new CharMap('M', true, RoundedType.Central, 0),		new CharMap('P', true, RoundedType.Central, 0),			new CharMap('A', true, RoundedType.Central, 0),		new CharMap('1', true, RoundedType.Ending, 0),		new CharMap(' ', true, RoundedType.None, 90),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),			new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', true, RoundedType.None, 90),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap('S', false, RoundedType.None, 0),		new CharMap('T', false, RoundedType.None, 0),		new CharMap('A', false, RoundedType.None, 0),		new CharMap('M', false, RoundedType.None, 0),		new CharMap('P', false, RoundedType.None, 0),		new CharMap('A', false, RoundedType.None, 0),			new CharMap('S', false, RoundedType.None, 90),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap('S', true, RoundedType.Starting, 90),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap('4', true, RoundedType.Ending, 270),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),			new CharMap('T', false, RoundedType.None, 90),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap('T', true, RoundedType.Central, 90),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap('A', true, RoundedType.Central, 270),	new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),			new CharMap('A', false, RoundedType.None, 90),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap('A', true, RoundedType.Central, 90),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap('P', true, RoundedType.Central, 270),	new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),			new CharMap('M', false, RoundedType.None, 90),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap('M', true, RoundedType.Central, 90),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap('M', true, RoundedType.Central, 270),	new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),			new CharMap('P', false, RoundedType.None, 90),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap('P', true, RoundedType.Central, 90),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap('A', true, RoundedType.Central, 270),	new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),			new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap('A', true, RoundedType.Central, 90),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap('T', true, RoundedType.Central, 270),	new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),			new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap('2', true, RoundedType.Ending, 90),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap('S', true, RoundedType.Starting, 270),	new CharMap('3', true, RoundedType.Ending, 180),	new CharMap('A', true, RoundedType.Central, 180),	new CharMap('P', true, RoundedType.Central, 180),	new CharMap('M', true, RoundedType.Central, 180),	new CharMap('A', true, RoundedType.Central, 180),		new CharMap('T', true, RoundedType.Central, 180),	new CharMap('S', true, RoundedType.Starting, 180),	new CharMap(' ', true, RoundedType.None, 180),},
				{ new CharMap(' ', false, RoundedType.None, 0) , new CharMap(' ', false, RoundedType.None, 0), new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),			new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),		new CharMap(' ', false, RoundedType.None, 0),}
			};
			string expectedResults = "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<style>\r\ntable { border-collapse: collapse;\r\n }\r\n\r\ntd {\r\nwidth: 30px;\r\nheight: 30px;\r\ntext-align: center;\r\nvertical-align: middle;\r\ntransform-origin: center center;\r\n \r\npadding: 7px 7px 7px 7px;\r\n}\r\n\r\n.round-none-0 {\r\n border-style: none none none none;\r\n}\r\n\r\n.round-starting-0 {\r\n border-style: dashed none dashed dashed  ;\r\n}\r\n\r\n.round-central-0 {\r\n border-style: dashed none dashed none; \r\n}\r\n\r\n.round-ending-0 {\r\n border-style: dashed dashed dashed none; \r\n}\r\n\r\n.round-none-90 {\r\n border-style: none none none none;\r\n}\r\n\r\n.round-starting-90 {\r\n border-style: dashed dashed none dashed;\r\n}\r\n\r\n.round-central-90 {\r\n border-style: none dashed none dashed ; \r\n}\r\n\r\n.round-ending-90 {\r\n border-style: none dashed dashed dashed; \r\n}\r\n\r\n.round-none-180 {\r\n border-style: none none none none;\r\n}\r\n\r\n.round-starting-180 {\r\n border-style: dashed dashed dashed none;\r\n}\r\n\r\n.round-central-180 {\r\n border-style: dashed none dashed none; \r\n}\r\n\r\n.round-ending-180 {\r\n border-style: dashed none dashed dashed; \r\n}\r\n\r\n.round-none-270 {\r\n border-style: none none none none;\r\n}\r\n\r\n.round-starting-270 {\r\n border-style: none dashed dashed dashed;\r\n}\r\n\r\n.round-central-270 {\r\n border-style: none dashed none dashed; \r\n}\r\n\r\n.round-ending-270{\r\n border-style: dashed dashed none dashed; \r\n}\r\n\r\n.rotate-90 {\r\ntransform: rotate(90deg);\r\n}\r\n\r\n.rotate-180 {\r\ntransform: rotate(180deg);\r\n}\r\n\r\n.rotate-270 {\r\ntransform: rotate(270deg);\r\n}\r\n\r\n.rounded {\r\nborder-style: dashed none dashed none;\r\n}\r\n\r\nbody { font-family: Verdana, sans-serif;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.center-container {\r\n    text-align: center;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"center-container\">\r\n<table>\r\n<tr>\r\n<td class=\" round-none-0 \" > </td><td class=\" round-none-0 \" > </td><td class=\" round-none-0 \" > </td><td class=\" round-starting-0 \" >S</td><td class=\" round-central-0 \" >T</td><td class=\" round-central-0 \" >A</td><td class=\" round-central-0 \" >M</td><td class=\" round-central-0 \" >P</td><td class=\" round-central-0 \" >A</td><td class=\" round-ending-0 \" >1</td><td class=\" rotate-90 round-none-90 \" > </td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-90 round-none-90 \" > </td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" \" >S</td><td class=\" \" >T</td><td class=\" \" >A</td><td class=\" \" >M</td><td class=\" \" >P</td><td class=\" \" >A</td><td class=\" rotate-90 \" >S</td><td class=\" \" > </td><td class=\" rotate-90 round-starting-90 \" >S</td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-270 round-ending-270 \" >4</td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-90 \" >T</td><td class=\" \" > </td><td class=\" rotate-90 round-central-90 \" >T</td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-270 round-central-270 \" >A</td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-90 \" >A</td><td class=\" \" > </td><td class=\" rotate-90 round-central-90 \" >A</td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-270 round-central-270 \" >P</td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-90 \" >M</td><td class=\" \" > </td><td class=\" rotate-90 round-central-90 \" >M</td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-270 round-central-270 \" >M</td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-90 \" >P</td><td class=\" \" > </td><td class=\" rotate-90 round-central-90 \" >P</td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-270 round-central-270 \" >A</td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-90 round-central-90 \" >A</td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-270 round-central-270 \" >T</td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-90 round-ending-90 \" >2</td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" rotate-270 round-starting-270 \" >S</td><td class=\" rotate-180 round-ending-180 \" >3</td><td class=\" rotate-180 round-central-180 \" >A</td><td class=\" rotate-180 round-central-180 \" >P</td><td class=\" rotate-180 round-central-180 \" >M</td><td class=\" rotate-180 round-central-180 \" >A</td><td class=\" rotate-180 round-central-180 \" >T</td><td class=\" rotate-180 round-starting-180 \" >S</td><td class=\" rotate-180 round-none-180 \" > </td></tr>\r\n<tr>\r\n<td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td><td class=\" \" > </td></tr>\r\n</table>\r\n<div/>\r\n</body>\r\n</html>\r\n";

			var result = _pdfHtmlGenerator.GenerateHTMLTableFromMatirx(matrinxChar);

			// Assert
			Assert.Equal(result.Replace("\r","").Replace("\n", ""), expectedResults.Replace("\r", "").Replace("\n", ""));
		}

		[Fact]
		public void should_return_html_content_for_PDFWithSingleLetter()
		{
			// Arrange
			//is allready done in constructor
			//Act			
			CharMap[,] matrinxChar = new CharMap[,]
			{
				{ new CharMap('A', true, RoundedType.None, 0)},
			};
			string expectedResults = "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<style>\r\ntable { border-collapse: collapse;\r\n }\r\n\r\ntd {\r\nwidth: 30px;\r\nheight: 30px;\r\ntext-align: center;\r\nvertical-align: middle;\r\ntransform-origin: center center;\r\n \r\npadding: 7px 7px 7px 7px;\r\n}\r\n\r\n.round-none-0 {\r\n border-style: none none none none;\r\n}\r\n\r\n.round-starting-0 {\r\n border-style: dashed none dashed dashed  ;\r\n}\r\n\r\n.round-central-0 {\r\n border-style: dashed none dashed none; \r\n}\r\n\r\n.round-ending-0 {\r\n border-style: dashed dashed dashed none; \r\n}\r\n\r\n.round-none-90 {\r\n border-style: none none none none;\r\n}\r\n\r\n.round-starting-90 {\r\n border-style: dashed dashed none dashed;\r\n}\r\n\r\n.round-central-90 {\r\n border-style: none dashed none dashed ; \r\n}\r\n\r\n.round-ending-90 {\r\n border-style: none dashed dashed dashed; \r\n}\r\n\r\n.round-none-180 {\r\n border-style: none none none none;\r\n}\r\n\r\n.round-starting-180 {\r\n border-style: dashed dashed dashed none;\r\n}\r\n\r\n.round-central-180 {\r\n border-style: dashed none dashed none; \r\n}\r\n\r\n.round-ending-180 {\r\n border-style: dashed none dashed dashed; \r\n}\r\n\r\n.round-none-270 {\r\n border-style: none none none none;\r\n}\r\n\r\n.round-starting-270 {\r\n border-style: none dashed dashed dashed;\r\n}\r\n\r\n.round-central-270 {\r\n border-style: none dashed none dashed; \r\n}\r\n\r\n.round-ending-270{\r\n border-style: dashed dashed none dashed; \r\n}\r\n\r\n.rotate-90 {\r\ntransform: rotate(90deg);\r\n}\r\n\r\n.rotate-180 {\r\ntransform: rotate(180deg);\r\n}\r\n\r\n.rotate-270 {\r\ntransform: rotate(270deg);\r\n}\r\n\r\n.rounded {\r\nborder-style: dashed none dashed none;\r\n}\r\n\r\nbody { font-family: Verdana, sans-serif;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.center-container {\r\n    text-align: center;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"center-container\">\r\n<table>\r\n<tr>\r\n<td class=\" round-none-0 \" >A</td></tr>\r\n</table>\r\n<div/>\r\n</body>\r\n</html>\r\n\r\n";

			var result = _pdfHtmlGenerator.GenerateHTMLTableFromMatirx(matrinxChar);

			// Assert
			Assert.Equal(result.Replace("\r", "").Replace("\n", ""), expectedResults.Replace("\r", "").Replace("\n", ""));
		}




	}
}